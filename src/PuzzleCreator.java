import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import java.io.FileOutputStream;
import java.security.SecureRandom;
import java.util.ArrayList;

/**
 * Contains methods that allow you to create, encrypt and write puzzles to a
 * file
 * @author Bradley Cain Watkins
 * @author 980321
 */
public class PuzzleCreator {
    private static Cipher cipher;
    private ArrayList<Puzzle> puzzles;

    public PuzzleCreator() {
        // Empty Constructor
    }

    /**
     * Generate and store 4096 puzzles
     * @return An array list consisting of the 4096 generated puzzle objects
     */
    public ArrayList<Puzzle> createPuzzles() {
        int numPuzzles = 4096;
        this.puzzles = new ArrayList<>(numPuzzles);
        try {
            for (int i = 0; i < numPuzzles; i++) {
                byte [] key = createRandomKey();
                Puzzle puzzle = new Puzzle(i+1,
                        CryptoLib.createKey(key));
                puzzle.setKeyAsBytes(key);
                puzzles.add(puzzle);
            }
        } catch (Exception e) {

        }

        return puzzles;
    }

    /**
     * Generate a random 64 bit key that can be used to form a DES key.
     * @return The generated bits in an array of 8 bytes
     */
    public byte[] createRandomKey() {
        byte[] key = new byte[8];
        try {
            SecureRandom.getInstanceStrong().nextBytes(key);
            for (int i = 2; i < key.length; i++) {
                key[i] = 0;
            }

        } catch (Exception e) {

        }
        return key;
    }

    /**
     * Takes a byte array representing a key and a puzzle object and encrypts
     * the puzzles byte representation into a byte array representing the
     * encrypted puzzle.
     * @param key The key used for encryption
     * @param puzzle The puzzle to be encrypted
     * @return The encrypted puzzle
     */
    public byte[] encryptPuzzle(byte[] key, Puzzle puzzle) {
        byte[] encryptedPuzzle = new byte[32];
        try {
            cipher = Cipher.getInstance("DES");
            SecretKey secretKey = CryptoLib.createKey(key);

            cipher.init(Cipher.ENCRYPT_MODE, secretKey);

            encryptedPuzzle = cipher.doFinal(puzzle.getPuzzleAsBytes());
        } catch (Exception e) {

        }

        return encryptedPuzzle;
    }

    /**
     * Encrypts the 4096 puzzles generated by createPuzzles nd writes them to
     * the passed file
     * @param fn Name of file written to
     */
    public void encryptPuzzlesToFile(String fn) {
        try {
            FileOutputStream file_out = new FileOutputStream(fn);
            for (int i = 0; i < puzzles.size(); i++) {
                Puzzle puzzle = puzzles.get(i);
                file_out.write(encryptPuzzle(puzzle.getKeyAsBytes(), puzzle));
            }
            file_out.close();
        } catch (Exception e) {

        }
    }

    /**
     * Gets the SecretKey object of the puzzle corresponding to the passed
     * puzzle number
     * @param puzzleNumber
     * @return SecretKey of the puzzle corresponding to the passed puzzle number
     */
    public SecretKey findKey(int puzzleNumber) {
        return puzzles.get(puzzleNumber-1).getKey();
    }

}
